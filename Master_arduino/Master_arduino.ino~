//Interfacing with another Due
#include <Wire.h>
//Defining variables for class motor
#define B 843
#define R 20
float rpm[2];
double velocity1,velocity2;
int ticks1,ticks2;


//Due QEI 
const int quad_A = 2;
const int quad_B = 13;
const unsigned int mask_quad_A = digitalPinToBitMask(quad_A);
const unsigned int mask_quad_B = digitalPinToBitMask(quad_B); 


Motor motors[2] = {Motor(9, 23, 25, 1), Motor(8, 22, 24, 0)}; //motors 1, 2

//motors[4] = { Motor(8, 23, 25, 27, 0), Motor(9, 22, 24, 26, 1)}; //motors 1, 2
/*-----------------------
 motor 1 - 8, 23, 25, 27 --- 8 - pwm, 23 - enable, 25 - dir, 27 - brake
 motor 2 - 9, 22, 26, 27 --- 9 - pwm, 22 - enable, 24 - dir, 26 - brake
 
 -------------------------*/
void bot_motion(float v, float w)
{ 
  //assuming v in input is cm/sec
  rpm[0]=(v+w*B)*60/(2*PI)/R;
  rpm[1]=(v-w*B)*60/(2*PI)/R;


  for(int i=0;i<2;i++) 
    motors[i].motor_move(rpm[i]);

}

//void bot_brake(int str)
//{
//  for(int i=0;i<4;i++)
//    motors[i].brake(HIGH, str);   
//}

void setup()
{
  motors[0].enable(HIGH);
  motors[1].enable(HIGH);


  Wire.begin();        // join i2c bus (address optional for master)
  Serial.begin(115200);  
  delay(500);
  /*---------Enabling Registers for QEI-----------------*/
  // activate peripheral functions for quad pins
  REG_PIOB_PDR = mask_quad_A;     // activate peripheral function (disables all PIO functionality)
  REG_PIOB_ABSR |= mask_quad_A;   // choose peripheral option B    
  REG_PIOB_PDR = mask_quad_B;     // activate peripheral function (disables all PIO functionality)
  REG_PIOB_ABSR |= mask_quad_B;   // choose peripheral option B 
  // activate clock for TC0
  REG_PMC_PCER0 = (1<<27);
  // select XC0 as clock source and set capture mode
  REG_TC0_CMR0 = 5; 
  // activate quadrature encoder and position measure mode, no filters
  REG_TC0_BMR = (1<<9)|(1<<8)|(0<<12);//we are detecting only half resolution
  // enable the clock (CLKEN=1) and reset the counter (SWTRG=1) 
  // SWTRG = 1 necessary to start the clock!!
  REG_TC0_CCR0 = 5;  
}
void loop()
{
  ticks1=-(int)REG_TC0_CV0;
  //  Serial.print(REG_TC0_CV0,DEC);
    Serial.print(ticks1);
    Serial.print(",");
  //delay(500);
  
    Wire.requestFrom(2, 9);    // request 6 bytes from slave device #2
String a;
  while(Wire.available())    // slave may send less than requested
  { 
    //Serial.print("c");
    char c = Wire.read(); // receive a byte as character
    if(c!='s'){
    a+=c;
           // print the character
  }
  else{
    
    break;}
  }Serial.println(a);  
 // Serial.println(a);
  ticks2=-atoi(a.c_str());
 //  Serial.println(ticks2);
 // delay(500);

  bot_motion(100,0); //velocity in cm/sec && angular velocity in radians/sec;
}


